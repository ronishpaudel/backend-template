generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String
  profilePic String
  products   Product[] @relation("UserProducts")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("users")
}

model Customer {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  phoneNumber Int
  orders      Order[]  @relation("CustomerOrders")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("customers")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[] @relation("CategoryProducts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String   @unique()
  price        String
  crossedPrice String?
  description  String
  imageUrl     String
  thumbnailUrl String?
  categoryId   Int
  category     Category @relation("CategoryProducts", fields: [categoryId], references: [id])
  userId       Int
  user         User     @relation("UserProducts", fields: [userId], references: [id])
  flag         Boolean
  size         String?
  status       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders OrderProduct[] @relation("ProductOrders")

  @@map("products")
}

model Order {
  id          Int            @id @default(autoincrement())
  orderNumber String         @unique
  status      String
  totalAmount String
  customerId  Int
  customer    Customer       @relation("CustomerOrders", fields: [customerId], references: [id])
  products    OrderProduct[] @relation("OrderProducts")
  payments    Payment[]      @relation("OrderPayments")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("orders")
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order   @relation("OrderProducts", fields: [orderId], references: [id])
  product   Product @relation("ProductOrders", fields: [productId], references: [id])

  @@unique([orderId, productId])
  @@map("order_products")
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int
  amount    String
  method    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation("OrderPayments", fields: [orderId], references: [id])

  @@map("payments")
}
